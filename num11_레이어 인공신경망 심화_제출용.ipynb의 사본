{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1ByOb68Db6UgNZuJB-d04d6jwWHsYGNmu","timestamp":1716815297761}],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# [코드리뷰 프로젝트] 2. 2레이어 인공신경망 심화"],"metadata":{"id":"6mU6d5SqUT9R"}},{"cell_type":"markdown","source":["## 0. 모델 세팅 & 포워딩 연산 구현하기"],"metadata":{"id":"hxH1WsE3DGq0"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"xzZbKuGRUTM-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716820588815,"user_tz":-540,"elapsed":9,"user":{"displayName":"한지혜","userId":"17980340776133229941"}},"outputId":"b9d3f737-4736-4d0a-82c6-4956db21e028"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[0 0 1 1]\n"," [0 1 0 1]]\n","[[0 1 1 0]]\n"]}],"source":["import numpy as np # numpy import\n","X = np.array([0, 0, 1, 1, 0, 1, 0, 1]).reshape(2,4) # 입력\n","Y = np.array([0, 1, 1, 0]).reshape(1,4) # 정답\n","\n","print(X)\n","print(Y)"]},{"cell_type":"code","source":["# 가중치 초기화 함수\n","def init_parameters(num_hidden_units = 2):\n","  W1 = np.random.randn(2, num_hidden_units) # 첫번째 레이어 가중치\n","  B1 = np.zeros((num_hidden_units,1)) # 첫번째 레이어 바이어스\n","  W2 = np.random.randn(num_hidden_units, 1) # 두번째 레이어 가중치\n","  B2 = np.zeros((1, 1)) # 두번째 레이어의 바이어스\n","  return W1, B1, W2, B2 # 가중치 파라미터 리턴\n","\n","#--------------------------------------------------------------------------------------------------------------------------------------\n","def affine(W, X, B):\n","  return np.dot(W.T, X) + B # '...'에 코드를 채워주세요.\n","\n","# sigmoid function을 구현하세요.\n","def sigmoid(z):\n","  return 1 / (1 + np.exp(-z)) # '...'에 코드를 채워주세요.\n","\n","w = np.arange(4).reshape(2,2)\n","b = [[1],[2]]\n","x = [[1],[1]]\n","\n","print(affine(w, x, b)) # affine test -> [[3],[6]]\n","\n","print(sigmoid(0.1)) # sigmoide test -> 0.524979"],"metadata":{"id":"-QJFXmvYU5rW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716820591209,"user_tz":-540,"elapsed":5,"user":{"displayName":"한지혜","userId":"17980340776133229941"}},"outputId":"5c799366-fff7-4077-b28a-9e1ae4eb61df"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["[[3]\n"," [6]]\n","0.52497918747894\n"]}]},{"cell_type":"markdown","source":["## 1. 손실함수 만들기\n"],"metadata":{"id":"52B1tG3uVM1z"}},{"cell_type":"markdown","source":["### [TODO] 1_ 이진 크로스 엔트로피 (Binary Cross Entropy)"],"metadata":{"id":"LbJ4JGZFNQEf"}},{"cell_type":"code","source":["#######################################\n","#### 3-1. 알맞은 코드를 직접 작성해보세요! ####\n","#######################################\n","\n","def binary_cross_entropy(Y, YHat):\n","  N = Y.shape[1] # 총 샘플의 수\n","  loss =-np.sum(Y * np.log(YHat) + (1 - Y) * np.log(1 - YHat)) / N # '...'에 코드를 채워주세요\n","  return loss"],"metadata":{"id":"qjgkC13zVRxD","executionInfo":{"status":"ok","timestamp":1716820599359,"user_tz":-540,"elapsed":382,"user":{"displayName":"한지혜","userId":"17980340776133229941"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# 정답 확인\n","Y = np.array([0, 1, 1, 0]).reshape(1, 4) # 정답\n","YHat = np.array([0.5, 0.5, 0.5, 0.5]).reshape(1, 4) # 추정값\n","\n","loss = binary_cross_entropy(Y, YHat)\n","print(\"2진 크로스엔트로피 비용:\", loss)"],"metadata":{"id":"9nL7PcEFVZll","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716820602148,"user_tz":-540,"elapsed":615,"user":{"displayName":"한지혜","userId":"17980340776133229941"}},"outputId":"4187bfb8-ad6c-4c26-984b-d5f335ad8b50"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["2진 크로스엔트로피 비용: 0.6931471805599453\n"]}]},{"cell_type":"markdown","source":["## 2. 순방향(forward) 및 역방향(backward) 연산 구현하기"],"metadata":{"id":"QrIqVlXgVafD"}},{"cell_type":"markdown","source":["### [TODO] 2_ 2레이어 순방향 연산 함수 구현하기"],"metadata":{"id":"NAvYPE1dNcr4"}},{"cell_type":"code","source":["#######################################\n","#### 3-2. 알맞은 코드를 직접 작성해보세요! ####\n","#######################################\n","\n","def forward_loss(X, Y, _params):\n","  W1, B1, W2, B2 = _params\n","\n","  # 첫번째 레이어연산\n","  Z1 = affine(W1, X, B1) # 1) affine 함수  - '...'에 채워주세요\n","  H = sigmoid(Z1)  # 2) sigmoid 함수 - '...'에 채워주세요\n","\n","  # 두번째 레이어 연산\n","  Z2 = affine(W2, H, B2)  # 3) affine 함수 - '...'에 채워주세요\n","  YHat =sigmoid(Z2) # 4) sigmoid 함수  - '...'에 채워주세요\n","\n","  # 손실함수 계산\n","  loss = binary_cross_entropy(Y, YHat)  # 5) 이진크로스 엔트로피 함수 - '...'에 채워주세요\n","\n","  return Z1, H, Z2, YHat, loss"],"metadata":{"id":"-LPTKa_PVeVJ","executionInfo":{"status":"ok","timestamp":1716820617227,"user_tz":-540,"elapsed":3,"user":{"displayName":"한지혜","userId":"17980340776133229941"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["np.random.seed(42) # random seed로 고정\n","W1, B1, W2, B2 = init_parameters(num_hidden_units = 2) # 파라미터 초기화\n","forward_loss(X, Y, [W1, B1, W2, B2])[-1] # loss출력 : 0.70492209"],"metadata":{"id":"C35-R0w3VeXb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716820623945,"user_tz":-540,"elapsed":471,"user":{"displayName":"한지혜","userId":"17980340776133229941"}},"outputId":"e2ea833f-3f73-4f94-b2ab-8c4878873ef0"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7049220984497544"]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["### [TODO] 5_ 2레이어 뉴럴네트워크의 역방향 연산 함수 구현하기"],"metadata":{"id":"kVbg3ObvWkDc"}},{"cell_type":"code","source":["#######################################\n","#### 3-3. 알맞은 코드를 직접 작성해보세요! ####\n","#######################################\n","\n","def get_gradients(X, Y, _params):\n","  W1, B1, W2, B2 = _params\n","  m = X.shape[1] # 샘플의 수\n","  # 포워드 함수 통과 후 출력\n","    # - Z1 : 첫번재 레이어 affine 결과\n","    # - H : 첫번재 레이어 sigmoid 통과한 결과\n","    # - Z2 : 두번재 레이어 affine 통과한 결과\n","    # - YHat : 두번재 레이어 sigmoid 통과한 결과\n","    # - loss : 크로스엔트로피 손실값\n","  Z1, H, Z2, YHat, loss = forward_loss(X, Y, _params)\n","\n","  # 1) dLoss/dZ2 구현. 손실함수가 각 샘플 손실의 평균으로 계산되기 때문에 그대로 구현하였습니다.\n","  dLdZ2 = (1/m)*(YHat-Y) # 그림에서 1의 구현\n","\n","  # 2) dLoss/dW2의 구현 - '...'을 구현하세요.\n","  dLdW2 = np.dot(H, (YHat-Y).T) # 그림에서 2의 구현 (초록색 2번 참고)\n","\n","  # 3) dLoss/dB2의 구현 - 샘플마다 gradient가 있음. 따라서 합쳐줘야 함.\n","  dLdB2 = np.sum(dLdZ2, axis=1, keepdims=True)  # 그림에서 3의 구현\n","\n","  # 4) dLoss/dH의 구현 - '...'을 구현하세요.\n","  dLdH = np.dot(W2, (YHat-Y)) #  그림에서 4의 구현\n","\n","  # 5) dLoss/dZ1의 구현 - '...'을 구현하세요.\n","  dLdZ1 = dLdH * H * (1-H) # 그림에서 5의 구현\n","\n","  # 6) dLoss/dW1의 구현 - '...'을 구현하세요.\n","  dLdW1 = np.dot(X, dLdZ1.T) # 그림에서 6의 구현\n","\n","  # 7) dLoss/dB1의 구현 - '...'을 구현하세요.\n","  dLdB1 = np.sum(dLdZ1, axis=1, keepdims=True)\n","\n","  return [dLdW1, dLdB1, dLdW2, dLdB2], loss"],"metadata":{"id":"nR_cEhQJWt0v","executionInfo":{"status":"ok","timestamp":1716820640440,"user_tz":-540,"elapsed":476,"user":{"displayName":"한지혜","userId":"17980340776133229941"}}},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":["## 3. 모델 학습하기"],"metadata":{"id":"uBEv2qM2W8y8"}},{"cell_type":"code","source":["def optimize (X, Y, _params, learning_rate = 0.1, iteration = 1000):\n","\n","    params = _params # 파라미터 복사\n","    loss_trace = [] # 손실 값 저장\n","\n","    for epoch in range(iteration): # 학습 반복\n","        dparams, loss = get_gradients(X, Y, params) # 그레디언트 추출\n","        for param, dparam in zip(params, dparams):\n","            param += - learning_rate * dparam # 경사하강법 구현\n","\n","        if (epoch % 100 == 0): # 손실값 저장\n","            loss_trace.append(loss)\n","\n","    _, _, _, Y_hat_predict, _ = forward_loss(X, Y, params) # 학습된 모델로 추론\n","\n","    return params,loss_trace, Y_hat_predict"],"metadata":{"id":"NFAI4lcHW_ta","executionInfo":{"status":"ok","timestamp":1716820666322,"user_tz":-540,"elapsed":335,"user":{"displayName":"한지혜","userId":"17980340776133229941"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["X = np.array([0, 0, 1, 1, 0, 1, 0, 1]).reshape(2,4) # 입력\n","Y = np.array([0, 1, 1, 0]).reshape(1,4) # 정답\n","\n","params = init_parameters(2) # 파라미터 세팅\n","new_params, loss_trace, Y_hat_predict = optimize(X, Y, params, 0.1, 150000) # 학습 및 추론\n","\n","print(Y_hat_predict) # 정답 Y와 유사한 값이 나왔다면 학습이 잘 진행된 것 입니다."],"metadata":{"id":"yREbBRV5XEM2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716820681732,"user_tz":-540,"elapsed":13044,"user":{"displayName":"한지혜","userId":"17980340776133229941"}},"outputId":"e7722446-de22-4c81-e543-cb8a52774f83"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1.34293040e-04 9.99860894e-01 9.99861124e-01 4.07126186e-04]]\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Plot learning curve (with costs)\n","plt.plot(loss_trace)\n","plt.ylabel('loss')\n","plt.xlabel('iterations (per hundreds)')\n","plt.show()"],"metadata":{"id":"KlPq2ojTXG8t","colab":{"base_uri":"https://localhost:8080/","height":449},"executionInfo":{"status":"ok","timestamp":1716820687039,"user_tz":-540,"elapsed":857,"user":{"displayName":"한지혜","userId":"17980340776133229941"}},"outputId":"c46c20ab-e7b8-450f-e5b2-69d29b048132"},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## 4. 코드리뷰 프로젝트 제출하기\n","\n","- 수행한 프로젝트 내용을 확인하고, 전체 코드를 파이썬 파일(.py)로 저장합니다.\n","- 다운로드 받은 .py 파일을 zip으로 압축 및 제출하여 수행여부를 증빙합니다.\n","- 이번 차시에 궁금한 점이 있다면, 본문에 내용을 함께 작성하여 제출할 수 있습니다."],"metadata":{"id":"Nk9dffeWOnti"}},{"cell_type":"markdown","source":["ALL RIGHTS RESERVED. (C)NAVER Connect Foundation."],"metadata":{"id":"fd3lAI76XH0u"}}]}